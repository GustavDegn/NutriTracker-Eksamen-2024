// Tilf√∏jer en event listener til DOMContentLoaded for at sikre, at handlinger initialiseres, n√•r dokumentet er indl√¶st.
document.addEventListener('DOMContentLoaded', function() {
  fetchMealsAndUpdateUI(); // Henter m√•ltider fra serveren og opdaterer brugergr√¶nsefladen.
  checkUserAuthentication(); // Kontrollerer brugerens autentifikation.

  // Tilknytter en event listener til 'tilf√∏jIngrediens' knappen
  let addButton = document.getElementById('tilf√∏jIngrediens');
  if (addButton) {
      addButton.addEventListener('click', tilf√∏jIngrediens); // Hvis knappen findes, tilf√∏jes klik-event til at tilf√∏je en ingrediens.
  }

  // Tilknytter event listener til formularen for m√•ltidsoprettelse
  const form = document.getElementById('mealCreatorFunktioner2'); // S√∏rg for, at dette ID stemmer overens med din forms ID.
  if (form) {
    form.addEventListener('submit', function(event) {
      event.preventDefault(); // Forhindrer standard form indsendelse.
      opretM√•ltid(); // Kalder funktionen for at oprette et m√•ltid.
    });
  }
});

// Funktion til at kontrollere brugerens autentifikation.
function checkUserAuthentication() {
  const userId = sessionStorage.getItem('UserId'); // Henter UserId fra sessionStorage.
  if (!userId) {
      window.location.href = '/login.html'; // Omdirigerer til login siden, hvis brugeren ikke er logget ind.
  }
}

// Funktion til at hente m√•ltider fra serveren og opdatere UI.
function fetchMealsAndUpdateUI() {
  fetch('/saveMeals/save', { method: 'GET' })  // Kontroller, at endpointet er korrekt.
  .then(response => {
      if (response.ok) return response.json(); // Hvis foresp√∏rgslen lykkes, parse responsen som JSON.
      throw new Error('Failed to fetch meals'); // Kaster en fejl, hvis foresp√∏rgslen mislykkes.
  })
  .then(fetchedMeals => {
      meals = fetchedMeals; // Gemmer hentede m√•ltider i den globale array.
      updateMealsDisplay(meals); // Opdaterer visningen af m√•ltider.
  })
  .catch(error => {
      console.error('Error fetching meals:', error); // Logger en fejl, hvis der opst√•r en fejl.
  });
}

// Funktion til at opdatere visningen af m√•ltider i brugergr√¶nsefladen.
function updateMealsDisplay(meals) {
  const m√•ltidsListe = document.getElementById('m√•ltidsListe');
  m√•ltidsListe.innerHTML = ''; // Clears the content of the meal list

  meals.forEach((meal) => {
    const mealDiv = document.createElement('div'); // Creates a new div element for each meal
    mealDiv.className = 'oprettedeM√•ltider'; // Adds a class to the div element

    // Adding buttons aligned to the right of the bullet points
    mealDiv.innerHTML = `
      <ul>
        <li>${meal.MealName}</li>
        <li>Total Kalorier: ${meal.totalKcal}</li>
      </ul>
      <div class="mealActions">
        <button class="buttonDelete" onclick="sletM√•ltid(${meal.MealID})">üóëÔ∏è</button>
        <button class="buttonOverview" onclick="oversigtIngredienser(${meal.MealID})">üìñ</button>
      </div>
    `;
    m√•ltidsListe.appendChild(mealDiv); // Appends the new div element to the meal list
  });
}

// Vi opretter arrays for at holde styr p√• ingredienser og m√•ltider, samt en variabel for redigering af et m√•ltid.
let m√•ltidsIngredienser = [];
let meals = [];

// Funktion til at tilf√∏je en ingrediens.
function tilf√∏jIngrediens() {
  let ingrediensNavn = prompt("Hvilken ingrediens vil du tilf√∏je?"); // Viser en prompt til brugeren for at indtaste navnet p√• en ingrediens.
  if (!ingrediensNavn) return;  // Afslutter funktionen, hvis der ikke indtastes noget.

  fetch(`/search?productName=${encodeURIComponent(ingrediensNavn)}`) // Udf√∏rer en GET-foresp√∏rgsel til serveren med produktets navn.
      .then(response => {
          if (!response.ok) throw new Error('Failed to fetch ingredients'); // Kaster en fejl, hvis foresp√∏rgslen mislykkes.
          return response.json(); // Parser responsen som JSON.
      })
      .then(data => {
          if (data.length > 0) {
              const ingrediensOplysninger = data[0]; // Henter de f√∏rste oplysninger om ingrediensen.
              console.log('Received ingredient information:', ingrediensOplysninger); // Logger oplysningerne til konsollen.
              let weight = prompt("Indtast v√¶gten i gram for ingrediensen:"); // Prompter brugeren til at indtaste v√¶gten for ingrediensen.
              weight = parseFloat(weight); // Konverterer v√¶gten til et tal.
              if (!isNaN(weight) && weight > 0) {
                  // Tilf√∏jer v√¶gten til ingrediensens oplysninger.
                  ingrediensOplysninger.weight = weight;
                  hentOplysninger(ingrediensOplysninger.foodID, weight); // Henter yderligere oplysninger baseret p√• ingrediensens ID og v√¶gt.
                  opdaterIngrediensListe(ingrediensOplysninger); // Opdaterer listen over ingredienser med de nye oplysninger.
              } else {
                  alert("Indtastet v√¶gt er ikke gyldig. Pr√∏v igen."); // Viser en fejlmeddelelse, hvis v√¶gten er ugyldig.
              }
          } else {
              alert("Ingen ingredienser fundet med det navn."); // Viser en fejlmeddelelse, hvis der ikke findes nogen ingredienser med det angivne navn.
          }
      })
      .catch(error => {
          console.error('Error retrieving the ingredient:', error); // Logger en fejl, hvis der opst√•r en fejl under hentningen.
          alert("Fejl ved hentning af ingrediensen."); // Viser en fejlmeddelelse til brugeren.
      });
}

// Funktion til at opdatere listen over ingredienser i brugergr√¶nsefladen.
function opdaterIngrediensListe(ingrediensOplysninger) {
  const ingrediensContainer = document.getElementById('ingrediensContainer'); // Henter containeren for ingredienser.
  const ingrediensDiv = document.createElement('div'); // Opretter et nyt div-element.
  ingrediensDiv.textContent = `${ingrediensOplysninger.foodName} - `; // Tilf√∏jer navnet p√• ingrediensen til div-elementet.
  ingrediensContainer.appendChild(ingrediensDiv); // Tilf√∏jer det nye div-element til containeren.
  
  m√•ltidsIngredienser.push(ingrediensOplysninger); // Tilf√∏jer den nye ingrediens til den lokale liste.
  
  // Opdaterer sessionStorage med den opdaterede liste.
  sessionStorage.setItem('m√•ltidsIngredienser', JSON.stringify(m√•ltidsIngredienser));
}

// Funktion til at hente n√∏glev√¶rdien for sorteringsparametre baseret p√• et givet n√∏gletal.
function getSortKeyName(sortKey) {
  switch(sortKey) {
    case 1030: return 'Kcal';
    case 1110: return 'Protein';
    case 1310: return 'Fat';
    case 1240: return 'Fibers';
    case 1010: return 'kJ';   
    case 1210: return 'Kulhydrat';   
    case 1610: return 'T√∏rstof';
    case 1620: return 'Vand'; 
    default: return 'Unknown'; // Returnerer 'Unknown' hvis n√∏gletallet ikke genkendes.
  }
}

// Funktion til at hente yderligere ern√¶ringsoplysninger for en ingrediens baseret p√• dens ID og v√¶gt.
function hentOplysninger(itemID, weight) {
  const sortKeys = [1030, 1110, 1310, 1240, 1010, 1210, 1610, 1620]; // Liste over n√∏gletal for ern√¶ringsoplysninger.
  sortKeys.forEach(sortKey => {
    fetch(`/foodCompSpecs?itemID=${encodeURIComponent(itemID)}&sortKey=${encodeURIComponent(sortKey)}`) // Udf√∏rer en GET-foresp√∏rgsel til serveren med itemID og sortKey.
      .then(response => response.json()) // Parser responsen som JSON.
      .then(data => {
        if (data && data.length > 0) {
          const nutrient = parseFloat(data[0].resVal); // Parser n√¶ringsv√¶rdien som et tal.
          const nutrientName = getSortKeyName(sortKey); // Henter navnet p√• n√¶ringsstoffet baseret p√• n√∏gletallet.
          const adjustedNutrientValue = (nutrient / 100) * weight; // Justerer n√¶ringsv√¶rdien baseret p√• v√¶gten.
          opdaterIngrediensN√¶ring(itemID, nutrientName, adjustedNutrientValue); // Opdaterer ern√¶ringsoplysningerne for ingrediensen.
        }
      })
      .catch(error => {
        console.error('An error occurred:', error); // Logger en fejl, hvis der opst√•r en fejl.
      });
  });
}

// Funktion til at opdatere ern√¶ringsoplysningerne for en ingrediens i den lokale datastruktur.
function opdaterIngrediensN√¶ring(itemID, nutrientName, nutrient) {
  let ingrediensIndex = m√•ltidsIngredienser.findIndex(ing => ing.foodID === itemID); // Finder indexet for ingrediensen i listen.
  if (ingrediensIndex !== -1) {
      // Tjekker, om objektet for n√¶ringsstoffer eksisterer, hvis ikke, initialiserer det.
      if (!m√•ltidsIngredienser[ingrediensIndex].nutrients) {
          m√•ltidsIngredienser[ingrediensIndex].nutrients = {};
      }
      m√•ltidsIngredienser[ingrediensIndex].nutrients[nutrientName] = nutrient; // Tilf√∏jer eller opdaterer n√¶ringsstoffet i objektet.
      opdaterIngrediensVisning(ingrediensIndex); // Opdaterer visningen af ingrediensen i brugergr√¶nsefladen.
  }
}

// Funktion til at opdatere visningen af en ingrediens i brugergr√¶nsefladen.
function opdaterIngrediensVisning(index) {
  const ingrediensContainer = document.getElementById('ingrediensContainer'); // Henter containeren for ingredienser.
  const ingrediensDivs = ingrediensContainer.getElementsByTagName('div'); // Henter alle div-elementer i containeren.
  if (ingrediensDivs[index]) {
    const ingredient = m√•ltidsIngredienser[index]; // Henter ingrediensen fra listen baseret p√• index.
    let nutrientString = `${ingredient.foodName} - `; // Starter strengen med navnet p√• ingrediensen.
    if (ingredient.nutrients) {
      nutrientString += `Kcal: ${ingredient.nutrients.Kcal || '0'}, `; // Tilf√∏jer kalorieindholdet til strengen, eller '0' hvis det ikke findes.
      nutrientString += `Protein: ${ingredient.nutrients.Protein || '0'}, `; // Tilf√∏jer proteinindholdet til strengen, eller '0' hvis det ikke findes.
      nutrientString += `Fat: ${ingredient.nutrients.Fat || '0'}, `; // Tilf√∏jer fedtindholdet til strengen, eller '0' hvis det ikke findes.
      nutrientString += `Fibers: ${ingredient.nutrients.Fibers || '0'}, `; // Tilf√∏jer fiberindholdet til strengen, eller '0' hvis det ikke findes.
      nutrientString += `kJ: ${ingredient.nutrients.kJ || '0'}, `; // Tilf√∏jer energiindholdet i kJ til strengen, eller '0' hvis det ikke findes.
      nutrientString += `Kulhydrat: ${ingredient.nutrients.Kulhydrat || '0'}, `; // Tilf√∏jer kulhydratindholdet til strengen, eller '0' hvis det ikke findes.
      nutrientString += `T√∏rstof: ${ingredient.nutrients.T√∏rstof || '0'}, `; // Tilf√∏jer t√∏rstofindholdet til strengen, eller '0' hvis det ikke findes.
      nutrientString += `Vand: ${ingredient.nutrients.Vand || '0'}, `; // Tilf√∏jer vandindholdet til strengen, eller '0' hvis det ikke findes.
    } else {
      nutrientString += 'No nutritional data available'; // Tilf√∏jer en tekst, hvis der ikke findes ern√¶ringsdata.
    }
    ingrediensDivs[index].textContent = nutrientString; // Opdaterer teksten i det tilsvarende div-element med den fulde streng.
  }
}

// Funktion til at nulstille listen over ingredienser b√•de visuelt og i den lokale datastruktur.
function nulstilIngredienser() {
  // T√∏mmer den visuelle liste over ingredienser
  const ingrediensContainer = document.getElementById('ingrediensContainer'); // Henter containeren for ingredienser.
  ingrediensContainer.innerHTML = ''; // T√∏mmer indholdet i containeren.

  // T√∏mmer den lokale datastruktur
  m√•ltidsIngredienser = []; // Nulstiller listen over ingredienser.

  // Fjerner ingredienser fra sessionStorage
  sessionStorage.removeItem('m√•ltidsIngredienser'); // Fjerner den gemte liste fra sessionStorage.
}

// Funktion til at oprette et nyt m√•ltid.
function opretM√•ltid() {
  let UserId = sessionStorage.getItem('UserId'); // Henter UserId fra sessionStorage.
  let MealName = document.getElementById('MealName').value; // Henter v√¶rdien af m√•ltidsnavnet fra inputfeltet.
  let totalKcal = m√•ltidsIngredienser.reduce((sum, ingredient) => sum + (ingredient.nutrients['Kcal'] || 0), 0); // Beregner den samlede m√¶ngde kalorier.
  let totalProtein = m√•ltidsIngredienser.reduce((sum, ingredient) => sum + (ingredient.nutrients['Protein'] || 0), 0); // Beregner den samlede m√¶ngde protein.
  let totalFat = m√•ltidsIngredienser.reduce((sum, ingredient) => sum + (ingredient.nutrients['Fat'] || 0), 0); // Beregner den samlede m√¶ngde fedt.
  let totalFibers = m√•ltidsIngredienser.reduce((sum, ingredient) => sum + (ingredient.nutrients['Fibers'] || 0), 0); // Beregner den samlede m√¶ngde fibre.
  let totalkJ = m√•ltidsIngredienser.reduce((sum, ingredient) => sum + (ingredient.nutrients['kJ'] || 0), 0); // Beregner den samlede m√¶ngde energi i kJ.
  
  // Udtr√¶kker b√•de navne p√• ingredienser og deres respektive v√¶gte
  let Ingredients = m√•ltidsIngredienser.map(ingredient => ({
    name: ingredient.foodName,
    weight: ingredient.weight
  }));
  

  let m√•ltidsData = {
    UserId: UserId, // Brugerens ID
    MealName: MealName, // Navnet p√• m√•ltidet
    Ingredients: JSON.stringify(Ingredients), // Gemmer ingredienser som en JSON-streng
    totalKcal: totalKcal, // Den samlede m√¶ngde kalorier
    totalProtein: totalProtein, // Den samlede m√¶ngde protein
    totalFat: totalFat, // Den samlede m√¶ngde fedt
    totalFibers: totalFibers, // Den samlede m√¶ngde fibre
    totalkJ: totalkJ // Den samlede m√¶ngde energi i kJ
  };

  fetch('/meals/create', {
    method: 'POST', // Specificerer HTTP-metoden som 'POST'.
    headers: { 'Content-Type': 'application/json' }, // Angiver indholdstypen for anmodningen.
    body: JSON.stringify(m√•ltidsData) // Sender m√•ltidsdataene som en JSON-streng.
  })
  .then(response => {
    if (response.ok) return response.json(); // Hvis foresp√∏rgslen lykkes, parse responsen som JSON.
    throw new Error('Failed to save meal'); // Kaster en fejl, hvis foresp√∏rgslen mislykkes.
  })
  .then(data => {
    console.log('Meal saved:', data); // Logger beskeden til konsollen, n√•r m√•ltidet er gemt.
    fetchMealsAndUpdateUI(); // Genindl√¶ser alle m√•ltider for at opdatere listen.
    nulstilIngredienser();  // Nulstiller ingredienslisten efter m√•ltidet er oprettet.
  })
  .catch(error => {
    console.error('Error saving the meal:', error); // Logger en fejl, hvis der opst√•r en fejl under gemningen.
  });
}

// Funktion til at slette et m√•ltid.
function sletM√•ltid(mealId) {
  fetch(`/meals/delete/${mealId}`, {
      method: 'DELETE' // Specificerer HTTP-metoden som 'DELETE'.
  })
  .then(response => {
      if (!response.ok) {
          throw new Error('Failed to delete meal'); // Kaster en fejl, hvis foresp√∏rgslen mislykkes.
      }
      return response.text(); // eller response.json(), hvis din server sender JSON.
  })
  .then(() => {
      console.log('Meal deleted successfully'); // Logger beskeden til konsollen, n√•r m√•ltidet er slettet succesfuldt.
      fetchMealsAndUpdateUI(); // Genhenter m√•ltider for at opdatere listen.
  })
  .catch(error => {
      console.error('Error deleting the meal:', error); // Logger en fejl, hvis der opst√•r en fejl under sletningen.
  });
}

// Funktion til at vise en oversigt over ingredienser for et bestemt m√•ltid.
function oversigtIngredienser(mealId) {
  // Finder m√•ltidet ved hj√¶lp af ID
  const meal = meals.find(meal => meal.MealID === mealId);
  if (!meal) {
    alert("Meal data not found!"); // Viser en fejlmeddelelse, hvis m√•ltidsdata ikke findes.
    return;
  }

  // Parser ingrediensernes JSON for at oprette en l√¶sbar liste over ingredienser med deres v√¶gte
  let ingredientsDetail = meal.Ingredients ? JSON.parse(meal.Ingredients).map(ing => `${ing.name} (${ing.weight}g)`).join(', ') : 'No ingredients listed'; // Tjekker, om der er angivet ingredienser, og opretter en streng med detaljer.

  // Forbereder teksten med ern√¶ringsdetaljer til visning i en advarsel
  let nutrientDetails = `Total Kalorier: ${meal.totalKcal || 0}, Total Protein: ${meal.totalProtein || 0}, Total Fedt: ${meal.totalFat || 0}, Total Fibre: ${meal.totalFibers || 0}`; // Opretter en streng med ern√¶ringsoplysninger for m√•ltidet.

  // Viser alle m√•ltidsoplysninger i en advarsel
  alert(`${meal.MealName}:\n${nutrientDetails}\nIngredienser: ${ingredientsDetail}`); // Viser en sammensat besked med m√•ltidsnavn, ern√¶ringsdetaljer og ingrediensliste.
}

// Funktion til at opdatere visningen af m√•ltider i brugergr√¶nsefladen.
function opdaterM√•ltider() {
  let m√•ltidsListe = document.getElementById('m√•ltidsListe'); // Henter elementet for m√•ltidslisten.
  m√•ltidsListe.innerHTML = ''; // Nulstiller indholdet i m√•ltidslisten.
  meals.forEach((meal, index) => {
    let mealDiv = document.createElement('div'); // Opretter et nyt div-element for hvert m√•ltid.
    mealDiv.className = 'oprettedeM√•ltider'; // Tilf√∏jer en klasse til div-elementet.

    mealDiv.innerHTML = `
      <div class="mealItem">${meal.MealName}</div>
      <div class="mealItem">${meal.totalKcal}</div>
      <div class="mealItem ${colorClass}">${ingredientCount}</div>
      <div class="mealActions">
        <button class="buttonEdit" onclick="redigerM√•ltid(${index})">‚úèÔ∏è</button>
        <button class="buttonDelete" onclick="sletM√•ltid(${index})">üóëÔ∏è</button>
        <button class="buttonOverview" onclick="oversigtIngredienser(${index})">üìñ</button>
      </div>
    `;
    m√•ltidsListe.appendChild(mealDiv); // Tilf√∏jer det nye div-element til m√•ltidslisten.
  });
  // Gemmer den opdaterede m√•ltidsliste i session storage.
  sessionStorage.setItem('meals', JSON.stringify(meals)); // Gemmer den opdaterede liste af m√•ltider som en JSON-streng i sessionStorage.
}

